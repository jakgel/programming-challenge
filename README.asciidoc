= eXXcellent programming challenge: Solution


== Goal

Implement a solution for the given tasks which aims for

* robustness & correctness
* readability & maintainability
* clean software design & architecture

I will also discuss my implementation and software design
decisions.

== Tasks


=== Task (taken from the original challenge)

Weather::
    In `weather.csv` you’ll find the daily weather data of a single month.
    Read the file, then output the day number (column one `Day`) of the day with
    the smallest temperature spread (difference between maximum &
    minimum temperature of the day.)
    The maximum temperature is the second column `MxT`, the minimum
    temperature the third column `MnT`.

Football::
    The `football.csv` file contains results of the
    English Premier League. The columns labeled ‘Goals’
    and ‘Goals Allowed’ contain the total number of goals scored
    by and against each team (so Arsenal scored
    79 goals themselves and had 36 goals scored against them).
    Read the file, then print the name of the team with the smallest
    difference in ‘Goals’ and ‘Goals Allowed’.

Task::
    1. Try to write a single program, which is able to solve the "Weather" 
       challenge. 
    2. Then try to refactor & extend your solution, that it additonally 
       supports the Football challenge. 

Process::
* Favour the software design goals described under _Goal_ over other goals 
  like _performance_ or _feature set_.
* Try to follow a test-driven development approach.


=== Separation of concerns
* Specify a file to read
* Read the file content. Expected format is header + a array like structure
* Choose two columns to compare all values with and a third column as identifier
* Find the row with the minimum difference of the values
* Return/Print this row

=== A quick diagram
image::./img/Scheme.jpg[Scheme of the implemented solution, width=95%]

== Process:

=== Python
To get an handle of this situation I started investigaing the hole situation with the programming language I am most fluent with - python.
For that I created a jupyter notebook *investigate_csv.ibnpy* in python 3.5 because it provides a meaningless implementation of documentation and code.

=== JAVA
I choose to start with an advanced IDE
following "Getting started" of the original branch I created a subbranch.

Besides JDK and maven I also installed and configured IntelliJ IDEA:
- First I followed the https://www3.ntu.edu.sg/home/ehchua/programming/howto/JDK_Howto.html
to install java development kit 10.0.1
- To install maven I used >>sudo apt install maven
- Then I installed  IntelliJ IDEA common tool via https://www.jetbrains.com/idea/download/#section=linux and added a project.

As this would be my first java script I would heavily work with other libraries if they were:
- commonly used
- and gave they impression that they are maintained
For reading the CSV I devided to use commonsCSV, also because it allows Line reading by a columns name.

I read https://www.callicoder.com/java-read-write-csv-file-apache-commons-csv/ to get an handle on how to use this method.
There I realized that it might be not very straightforward to access all elements as an array. After reading https://www.tutorialspoint.com/java/java_arraylist_class.htm I came to the conclusion that using an ArrayList object might become handy.
I was and am I quite unsure about the common way to store table output in java. Hence I decided to start simple and change the first concern
'Read CSV' into 'Load the three relevant columns'.

This would find later use in compare_columns(). Throughout several commits a found one major bug and realized that I had interpreted "minimal spread" to losely.
However I am now done. I am 100 % certain that  AppTest.java could be implemented in a way more to the spirit of Maven.

I also now that the support of different formats could be well received.

